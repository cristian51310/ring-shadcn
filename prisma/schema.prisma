datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  role           Role         @default(USER)
  accounts       Account[]
  orders         Order[]
  restaurant     Restaurant?  @relation(fields: [restaurantID], references: [id])
  restaurantID   String?      @map("restaurantID") @db.ObjectId
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String
  image       String
  inStock     Boolean
}

model ProductBeta {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  image       String
  inStock     Boolean
  menuId      String?    @db.ObjectId
  Menu        Menu?      @relation(fields: [menuId], references: [id])
  categoryIDs String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  sizeIDs     String[]   @db.ObjectId
  sizes       Size[]     @relation(fields: [sizeIDs], references: [id])
  flavorIDs   String[]   @db.ObjectId
  flavors     Flavor[]   @relation(fields: [flavorIDs], references: [id])
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String
  image       String
  productsIDs String[]      @db.ObjectId
  products    ProductBeta[] @relation(fields: [productsIDs], references: [id])
}

model Size {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String
  image       String
  productsIDs String[]      @db.ObjectId
  products    ProductBeta[] @relation(fields: [productsIDs], references: [id])
}

model Flavor {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  description String
  image       String?
  productsIDs String[]      @db.ObjectId
  products    ProductBeta[] @relation(fields: [productsIDs], references: [id])
}

model Menu {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  image        String
  products     ProductBeta[]
  restaurantId String?       @db.ObjectId
  restaurant   Restaurant?   @relation(fields: [restaurantId], references: [id])
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime          @default(now())
  paymentIntentId String            @unique
  products        CartProductType[]
  address         Address?
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  logo           String
  cover          String
  street         String
  city           String
  zip            String
  exteriorNumber String
  interiorNumber String?
  neighborhood   String
  state          State    @default(Guanajuato)
  email          String
  phone          String
  menus          Menu[]
  users          User[]
}

type CartProductType {
  id          String
  name        String
  description String
  category    String
  image       String
  quantity    Int
  price       Float
}

type Address {
  city        String
  country     String
  line1       String
  line2       String?
  postal_code String
  state       String
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum State {
  Guanajuato
  Michoacan
}
